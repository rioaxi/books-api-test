{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 0,
    "pending": 0,
    "failures": 4,
    "start": "2024-08-16T23:49:28.912Z",
    "end": "2024-08-16T23:49:29.755Z",
    "duration": 843,
    "testsRegistered": 4,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "73e8a60d-a9ac-4f9f-8edf-3f34d43be175",
      "title": "",
      "fullFile": "cypress\\e2e\\books_api_security_spec.cy.js",
      "file": "cypress\\e2e\\books_api_security_spec.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e533b7d0-812b-47e4-a6dc-91e01a98c18e",
          "title": "Books API - Security Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should not be vulnerable to SQL Injection when adding a book",
              "fullTitle": "Books API - Security Tests should not be vulnerable to SQL Injection when adding a book",
              "timedOut": null,
              "duration": 219,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const sqlInjectionPayload = {\n  title: \"' OR '1'='1\",\n  author: \"Test Author\",\n  year: 2024\n};\ncy.request({\n  method: 'POST',\n  url: '/books',\n  headers: {\n    'Authorization': `Bearer ${token}`\n  },\n  body: sqlInjectionPayload,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400); // Expecting a validation error or failure\n  expect(response.body.errors).to.have.property('title').and.to.match(/invalid/); // Adjust as needed\n});",
              "err": {
                "message": "AssertionError: expected 201 to equal 400",
                "estack": "AssertionError: expected 201 to equal 400\n    at Context.eval (webpack:///./cypress/e2e/books_api_security_spec.cy.js:31:39)",
                "diff": "- 201\n+ 400\n"
              },
              "uuid": "1e02f226-67c3-46a7-87aa-06e1658a009d",
              "parentUUID": "e533b7d0-812b-47e4-a6dc-91e01a98c18e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not be vulnerable to SQL Injection when updating a book",
              "fullTitle": "Books API - Security Tests should not be vulnerable to SQL Injection when updating a book",
              "timedOut": null,
              "duration": 174,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const bookId = 31;\nconst sqlInjectionPayload = {\n  title: \"' OR '1'='1\",\n  author: \"Test Author\",\n  year: 2024\n};\ncy.request({\n  method: 'PUT',\n  url: `/books/${bookId}`,\n  headers: {\n    'Authorization': `Bearer ${token}`\n  },\n  body: sqlInjectionPayload,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400);\n  expect(response.body.errors).to.have.property('title').and.to.match(/invalid/);\n});",
              "err": {
                "message": "AssertionError: expected 404 to equal 400",
                "estack": "AssertionError: expected 404 to equal 400\n    at Context.eval (webpack:///./cypress/e2e/books_api_security_spec.cy.js:53:39)",
                "diff": "- 404\n+ 400\n"
              },
              "uuid": "b620e744-c2a4-48f1-a3e1-02b7d96a6325",
              "parentUUID": "e533b7d0-812b-47e4-a6dc-91e01a98c18e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not be vulnerable to XSS when adding a book",
              "fullTitle": "Books API - Security Tests should not be vulnerable to XSS when adding a book",
              "timedOut": null,
              "duration": 175,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const xssPayload = {\n  title: \"<script>alert('XSS')</script>\",\n  author: \"Test Author\",\n  year: 2024\n};\ncy.request({\n  method: 'POST',\n  url: '/books',\n  headers: {\n    'Authorization': `Bearer ${token}`\n  },\n  body: xssPayload,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400);\n  expect(response.body.errors).to.have.property('title').and.to.match(/invalid/);\n});",
              "err": {
                "message": "AssertionError: expected 201 to equal 400",
                "estack": "AssertionError: expected 201 to equal 400\n    at Context.eval (webpack:///./cypress/e2e/books_api_security_spec.cy.js:73:39)",
                "diff": "- 201\n+ 400\n"
              },
              "uuid": "54b65c91-8b75-4dfa-a804-f7c526854b5b",
              "parentUUID": "e533b7d0-812b-47e4-a6dc-91e01a98c18e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not be vulnerable to XSS when updating a book",
              "fullTitle": "Books API - Security Tests should not be vulnerable to XSS when updating a book",
              "timedOut": null,
              "duration": 165,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const bookId = 31;\nconst xssPayload = {\n  title: \"<script>alert('XSS')</script>\",\n  author: \"Test Author\",\n  year: 2024\n};\ncy.request({\n  method: 'PUT',\n  url: `/books/${bookId}`,\n  headers: {\n    'Authorization': `Bearer ${token}`\n  },\n  body: xssPayload,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400);\n  expect(response.body.errors).to.have.property('title').and.to.match(/invalid/);\n});",
              "err": {
                "message": "AssertionError: expected 404 to equal 400",
                "estack": "AssertionError: expected 404 to equal 400\n    at Context.eval (webpack:///./cypress/e2e/books_api_security_spec.cy.js:95:39)",
                "diff": "- 404\n+ 400\n"
              },
              "uuid": "4fa721e6-6ac7-4c52-9222-d43ea778c9f4",
              "parentUUID": "e533b7d0-812b-47e4-a6dc-91e01a98c18e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1e02f226-67c3-46a7-87aa-06e1658a009d",
            "b620e744-c2a4-48f1-a3e1-02b7d96a6325",
            "54b65c91-8b75-4dfa-a804-f7c526854b5b",
            "4fa721e6-6ac7-4c52-9222-d43ea778c9f4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 733,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "results/mocha",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}