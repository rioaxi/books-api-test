{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 6,
    "pending": 0,
    "failures": 1,
    "start": "2024-08-16T23:49:22.802Z",
    "end": "2024-08-16T23:49:23.241Z",
    "duration": 439,
    "testsRegistered": 7,
    "passPercent": 85.71428571428571,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7f77336e-738a-47fb-997e-7511a49c8cc0",
      "title": "",
      "fullFile": "cypress\\e2e\\books_api_negative_spec.cy.js",
      "file": "cypress\\e2e\\books_api_negative_spec.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8d262cf7-d555-40c4-acfc-c6dc0aed41c6",
          "title": "Books Collection API - Negative Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should authenticate and return a JWT token",
              "fullTitle": "Books Collection API - Negative Tests should authenticate and return a JWT token",
              "timedOut": null,
              "duration": 77,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('POST', '/login', {\n  username: 'testuser',\n  password: 'password'\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('token');\n  token = response.body.token;\n});",
              "err": {},
              "uuid": "2e4d1503-75c2-4319-b66e-8b75f723b1b4",
              "parentUUID": "8d262cf7-d555-40c4-acfc-c6dc0aed41c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 when getting a non-existent book",
              "fullTitle": "Books Collection API - Negative Tests should return 404 when getting a non-existent book",
              "timedOut": null,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nonExistentBookId = 9999;\ncy.request({\n  method: 'GET',\n  url: `/books/${nonExistentBookId}`,\n  headers: {\n    'Authorization': `Bearer ${token}`\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n  expect(response.body).to.have.property('error', 'Book not found');\n});",
              "err": {},
              "uuid": "fb5e9f81-1dc7-4e75-9f0d-240d8de6983b",
              "parentUUID": "8d262cf7-d555-40c4-acfc-c6dc0aed41c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 when deleting a non-existent book",
              "fullTitle": "Books Collection API - Negative Tests should return 404 when deleting a non-existent book",
              "timedOut": null,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nonExistentBookId = 9999;\ncy.request({\n  method: 'DELETE',\n  url: `/books/${nonExistentBookId}`,\n  headers: {\n    'Authorization': `Bearer ${token}`\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n  expect(response.body).to.have.property('error', 'Book not found');\n});",
              "err": {},
              "uuid": "994dd5b7-06d5-4f71-ac64-dad117023c91",
              "parentUUID": "8d262cf7-d555-40c4-acfc-c6dc0aed41c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 when adding a book with missing fields",
              "fullTitle": "Books Collection API - Negative Tests should return 400 when adding a book with missing fields",
              "timedOut": null,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: '/books',\n  headers: {\n    'Authorization': `Bearer ${token}`\n  },\n  body: {\n    // Missing 'title' and 'author'\n    year: 2024\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400);\n  expect(response.body.errors).to.have.property('title', 'Title is required and should be a string with a maximum length of 255 characters.');\n  expect(response.body.errors).to.have.property('author', 'Author is required and should be a string with a maximum length of 255 characters.');\n});",
              "err": {},
              "uuid": "377f6709-90a9-4ee8-9b78-6e64f99c32a2",
              "parentUUID": "8d262cf7-d555-40c4-acfc-c6dc0aed41c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 when adding a book with invalid data",
              "fullTitle": "Books Collection API - Negative Tests should return 400 when adding a book with invalid data",
              "timedOut": null,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: '/books',\n  headers: {\n    'Authorization': `Bearer ${token}`\n  },\n  body: {\n    title: '1984',\n    author: '',\n    year: 'invalid year'\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400);\n  expect(response.body.errors).to.have.property('author', 'Author is required and should be a string with a maximum length of 255 characters.');\n  expect(response.body.errors).to.have.property('year', 'Year is required and should be a valid number between 0 and the current year.');\n});",
              "err": {},
              "uuid": "b75c2560-8729-4621-8bf9-f875310217ff",
              "parentUUID": "8d262cf7-d555-40c4-acfc-c6dc0aed41c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 when updating a book with invalid data",
              "fullTitle": "Books Collection API - Negative Tests should return 400 when updating a book with invalid data",
              "timedOut": null,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const bookId = 1;\ncy.request({\n  method: 'PUT',\n  url: `/books/${bookId}`,\n  headers: {\n    'Authorization': `Bearer ${token}`\n  },\n  body: {\n    title: '',\n    author: 'New Author',\n    year: 2025\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400);\n  expect(response.body.errors).to.have.property('year', 'Year should be a valid number between 0 and the current year.');\n});",
              "err": {},
              "uuid": "3340ab74-87a8-4b23-9026-e176d6aff766",
              "parentUUID": "8d262cf7-d555-40c4-acfc-c6dc0aed41c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should handle server timeout gracefully",
              "fullTitle": "Books Collection API - Negative Tests Should handle server timeout gracefully",
              "timedOut": null,
              "duration": 197,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: '/books/delayed',\n  // Use the delayed route\n  headers: {\n    'Authorization': `Bearer ${token}`\n  },\n  timeout: 6000,\n  // Setting a 6s timeout\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(503);\n  expect(response.body).to.have.property('error', 'Request timed out');\n});",
              "err": {
                "message": "AssertionError: expected 404 to equal 503",
                "estack": "AssertionError: expected 404 to equal 503\n    at Context.eval (webpack:///./cypress/e2e/books_api_negative_spec.cy.js:121:39)",
                "diff": "- 404\n+ 503\n"
              },
              "uuid": "12a71f2e-c202-493a-8dd5-03bcac2318d5",
              "parentUUID": "8d262cf7-d555-40c4-acfc-c6dc0aed41c6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2e4d1503-75c2-4319-b66e-8b75f723b1b4",
            "fb5e9f81-1dc7-4e75-9f0d-240d8de6983b",
            "994dd5b7-06d5-4f71-ac64-dad117023c91",
            "377f6709-90a9-4ee8-9b78-6e64f99c32a2",
            "b75c2560-8729-4621-8bf9-f875310217ff",
            "3340ab74-87a8-4b23-9026-e176d6aff766"
          ],
          "failures": [
            "12a71f2e-c202-493a-8dd5-03bcac2318d5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 336,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "results/mocha",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}