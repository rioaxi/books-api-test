{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2024-08-16T23:49:19.588Z",
    "end": "2024-08-16T23:49:19.704Z",
    "duration": 116,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "36c619d8-95d7-4177-a2b1-fb5942e7201c",
      "title": "",
      "fullFile": "cypress\\e2e\\books_api_auth_spec.cy.js",
      "file": "cypress\\e2e\\books_api_auth_spec.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0be76d89-6186-47d2-a627-8970019364e0",
          "title": "Books Collection API - Authentication Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 401 when accessing the API without a token",
              "fullTitle": "Books Collection API - Authentication Tests should return 401 when accessing the API without a token",
              "timedOut": null,
              "duration": 46,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: '/books',\n  body: sampleBook,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(401);\n  expect(response.body).to.have.property('error', 'Unauthorized: No token provided');\n});",
              "err": {},
              "uuid": "77bc1464-ab45-4e48-825c-95e7e1a92dba",
              "parentUUID": "0be76d89-6186-47d2-a627-8970019364e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 403 when accessing the API with an expired token",
              "fullTitle": "Books Collection API - Authentication Tests should return 403 when accessing the API with an expired token",
              "timedOut": null,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const expiredToken = 'expiredToken12345';\ncy.request({\n  method: 'POST',\n  url: '/books',\n  headers: {\n    'Authorization': `Bearer ${expiredToken}`\n  },\n  body: sampleBook,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(403);\n  expect(response.body).to.have.property('error', 'Forbidden: Invalid token');\n});",
              "err": {},
              "uuid": "ac42e690-7d1c-47a7-8a09-1101a5f21ac3",
              "parentUUID": "0be76d89-6186-47d2-a627-8970019364e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 403 when accessing the API with a malformed token",
              "fullTitle": "Books Collection API - Authentication Tests should return 403 when accessing the API with a malformed token",
              "timedOut": null,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const malformedToken = 'malformedToken12345';\ncy.request({\n  method: 'POST',\n  url: '/books',\n  headers: {\n    'Authorization': `Bearer ${malformedToken}`\n  },\n  body: sampleBook,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(403);\n  expect(response.body).to.have.property('error', 'Forbidden: Invalid token');\n});",
              "err": {},
              "uuid": "5f4b23f5-2006-49a4-aa89-c04494e527cf",
              "parentUUID": "0be76d89-6186-47d2-a627-8970019364e0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "77bc1464-ab45-4e48-825c-95e7e1a92dba",
            "ac42e690-7d1c-47a7-8a09-1101a5f21ac3",
            "5f4b23f5-2006-49a4-aa89-c04494e527cf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 76,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "results/mocha",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}