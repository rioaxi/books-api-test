{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2024-08-16T22:57:29.620Z",
    "end": "2024-08-16T22:57:29.823Z",
    "duration": 203,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4152f793-9d0c-46e0-b588-286730b5ab5b",
      "title": "",
      "fullFile": "cypress\\e2e\\books_api_positive_spec.cy.js",
      "file": "cypress\\e2e\\books_api_positive_spec.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "22c83a16-8de2-4a5f-89d5-bf75e65be201",
          "title": "Books Collection API - Postive Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should authenticate and return a JWT token",
              "fullTitle": "Books Collection API - Postive Tests should authenticate and return a JWT token",
              "timedOut": null,
              "duration": 77,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('POST', '/login', {\n  username: 'testuser',\n  password: 'password'\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('token');\n  token = response.body.token;\n});",
              "err": {},
              "uuid": "d96a1c5c-e3d0-41bd-8181-511012853b6f",
              "parentUUID": "22c83a16-8de2-4a5f-89d5-bf75e65be201",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should GET all the books",
              "fullTitle": "Books Collection API - Postive Tests should GET all the books",
              "timedOut": null,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: '/books',\n  headers: {\n    'Authorization': `Bearer ${token}`\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an('array');\n  expect(response.body.length).to.be.gte(1);\n});",
              "err": {},
              "uuid": "f3cd0adb-d78f-45dc-b94e-c2848ba3ef30",
              "parentUUID": "22c83a16-8de2-4a5f-89d5-bf75e65be201",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should GET a book by the given id",
              "fullTitle": "Books Collection API - Postive Tests should GET a book by the given id",
              "timedOut": null,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const bookId = 1;\ncy.request({\n  method: 'GET',\n  url: `/books/${bookId}`,\n  headers: {\n    'Authorization': `Bearer ${token}`\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('id', bookId);\n});",
              "err": {},
              "uuid": "3aadabaa-9279-4149-a4ce-a832c913b8fa",
              "parentUUID": "22c83a16-8de2-4a5f-89d5-bf75e65be201",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should POST a new book",
              "fullTitle": "Books Collection API - Postive Tests should POST a new book",
              "timedOut": null,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: '/books',\n  headers: {\n    'Authorization': `Bearer ${token}`\n  },\n  body: {\n    title: 'New Book',\n    author: 'New Author',\n    year: 2024\n  }\n}).then(response => {\n  expect(response.status).to.eq(201);\n  expect(response.body).to.have.property('title', 'New Book');\n});",
              "err": {},
              "uuid": "5688adcf-0f7e-4b4e-be2c-0bf58326b72e",
              "parentUUID": "22c83a16-8de2-4a5f-89d5-bf75e65be201",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should UPDATE a book by the given id",
              "fullTitle": "Books Collection API - Postive Tests should UPDATE a book by the given id",
              "timedOut": null,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const bookId = 31;\ncy.request({\n  method: 'PUT',\n  url: `/books/${bookId}`,\n  headers: {\n    'Authorization': `Bearer ${token}`\n  },\n  body: {\n    title: 'Updated Book',\n    author: 'Updated Author',\n    year: 2024\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('title', 'Updated Book');\n});",
              "err": {},
              "uuid": "d24f0a5c-4e14-46eb-9053-b928e97dcf60",
              "parentUUID": "22c83a16-8de2-4a5f-89d5-bf75e65be201",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should DELETE a book by the given id",
              "fullTitle": "Books Collection API - Postive Tests should DELETE a book by the given id",
              "timedOut": null,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const bookId = 31;\ncy.request({\n  method: 'DELETE',\n  url: `/books/${bookId}`,\n  headers: {\n    'Authorization': `Bearer ${token}`\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('message', 'Book deleted successfully');\n});",
              "err": {},
              "uuid": "36f6e62d-faab-4178-b7e3-c87a90045b74",
              "parentUUID": "22c83a16-8de2-4a5f-89d5-bf75e65be201",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d96a1c5c-e3d0-41bd-8181-511012853b6f",
            "f3cd0adb-d78f-45dc-b94e-c2848ba3ef30",
            "3aadabaa-9279-4149-a4ce-a832c913b8fa",
            "5688adcf-0f7e-4b4e-be2c-0bf58326b72e",
            "d24f0a5c-4e14-46eb-9053-b928e97dcf60",
            "36f6e62d-faab-4178-b7e3-c87a90045b74"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 134,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "results/mocha",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}